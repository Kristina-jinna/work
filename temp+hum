from re import *
from math import *
from itertools import *
from networkx import *
from matplotlib import *
from numpy import *
#from pyparsing import *
import networkx as nx
import matplotlib.pyplot as plt
import xlwt, xlrd
import csv
import plotly.plotly as py
import numpy as np
#import random
from PyQt5 import QtCore


fig = plt.figure()



Temp_mm = []
Humid_mm = []
Res = []
Noerr = []
Err = []
vals1 = []
#Estim2 = []
#Marks = []



#for i in time:
#    datos.append([random.randint(-100,100),random.randint(0,1000)])


def Mining():
    rb = xlrd.open_workbook ('C:/Users/krist/PycharmProjects/untitled1/data_set 2016(corect).xls',formatting_info=True)###Kristina_data.xls   data_set 2016
    sheet = rb.sheet_by_index(0)
    vals = [sheet.row_values(rownum) for rownum in range(sheet.nrows)]
    vals.pop(0)


    #print(vals, len(vals))

    for i in vals:
        #print(i)
        #if i[4] != 0.0:
        y = xlrd.xldate_as_tuple(i[0], 0)
        y1 = list(y[1:3])
        #print(y1)
        i[0] = float( '.'.join([str(t) for t in y1]))
        #print(i)
        if 8.0 < i[0] < 9.0 :
            #print(i[0])
            if i[4] == 0.0:
                Noerr.append(i)
            else:
                Err.append(i)

    #print(Err)



    C = []

    for r in Noerr:
        if r[0] not in C:
            C.append(r[0])
    #print(C)

    C1 = []
    C2 = []

    for r in C:
        C1 = []
        for q in Noerr:
            if q[0] == r:
                C1.append(q)

        C2.append(C1)

    #print(C)



    #for i in range(len(Err)):  ##############
        #print(Err[i][0])
    #    if Err[i][0] != Err[i+1][0]:
    #        C1.append(C)
    #        C = []

    #    else:
    #        C.append(Err[i])

    return C2



#print(Mining())

def Culc():

    Month = []
    Estim2 = []
    Marks = []

    Month = Mining()

    #print(Month)

    for u in Month:
        #print(u)
        datos = []
        temp = []
        humid = []
        for j in u: ###vals[:96]
            #print(j[3])
            datos.append([round(j[2],1),round(j[3],1)])
            temp.append(round(j[2],1))
            humid.append(round(j[3],1))
            plt.scatter(round(j[2],3),round(j[3],3), c="r", alpha=0.1, edgecolors='none')

        #print(datos)
            print(j)


        Estim = []


        Estim.append([min(temp),min(humid),min(temp),max(humid),max(temp),min(humid),max(temp),max(humid)])
        Estim2.append(Estim)

    #print(Estim2)

    for i in Estim2:
        for j in i:
            Marks.append(j)
    #print(Marks)



        #for i in range(2):
        #    #print(i)
        #    mx = datos[0][i]
        #    mn = datos[0][i]
        #    for j in range(len(datos)):
        #        if datos[j][i] > mx:
        #            mx = datos[j][i]
        #        elif datos[j][i] < mn:
        #            mn = datos[j][i]
        #    Estim.append([mn,mx])

        #print(Estim)

        #for i in range(2):
        #    for j in range(len(Estim)):
        #        Estim2.append(round(Estim[0][i],1))
        #        Estim2.append(round(Estim[1][j],1))

        #Marks.append(Estim2)

    #return Marks
    #print(Marks)
#print(Culc())


#def Intersection():

    #Inter = []
    #Inter = Culc()
    Sum2 = []
    Sum1 = []
    Sum = []
    X12 = []
    Y12 = []

    #print(Inter)

    for i in range(len(Marks)):
        x1 = Marks[i][0]
        x2 = Marks[i][4]
        y1 = Marks[i][1]
        y2 = Marks[i][3]
        x12 = int((x2-x1)/0.1)
        y12 = int((y2-y1)/0.1)

        #print(x1,x2)
        #print(x12,y12)

        X1 = [x1]
        for x in range(x12):
            x1 = x1 + 0.1
            X1.append(round(x1,1))

        #print(X1)


        Y1 = [y1]
        for y in range(y12):
            y1 = y1 + 0.1
            Y1.append(round(y1,1))

        X12.append(X1)
        Y12.append(Y1)

        #print(X12)
        #print(Y12)


    for i in range(len(X12)):
        for u in X12[i]:
            for j in Y12[i]:
                Sum.append([u,j])

    #print(Sum)


    for j in Sum:
        if Sum.count(j) == len(X12):
            Sum1.append(j)

    #print(Sum1)


    #return Sum1


#print(Intersection())

    #fig = plt.figure()

#def Figure():

    #Marks2 = []
    #Marks2 = Culc()

    m = 5
    n = 7


    for y in Marks:
        t = y[m]
        y[m] = y[n]
        y[n] = t
        y = y + y[0:2]
        #print(y)
        plt.plot(y[0::2],y[1::2], c="g")


    #Inc = []
    #Inc = Intersection()

    #for i in datos:
    #    plt.scatter(i[0],i[1], c="r", alpha=0.3, edgecolors='none')

    for p in Sum1:
        #print(p)
        plt.scatter(p[0],p[1], c="b", alpha=0.3, edgecolors='none',s = 20)


    plt.grid(True)

    plt.xlabel(u'Temp ', fontsize=12)
    plt.ylabel(u'Humidity', fontsize=12)
    plt.xlim(19,28)
    plt.ylim(35,70)


    plt.show()

print(Culc())
